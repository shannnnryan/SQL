--Below are HackerRank SQL queries I've written

--->Revising the Select Query 1
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

The CITY table is described as follows:
Field	      Type
ID	      NUMBER
NAME	    VARCHAR2(17)
COUNTRY CODE	  VARCHAR2(3)
DISTRICT     VARCHAR2(20)
POPULATION    	NUMBER

SOLUTION: 
SELECT *
FROM City
WHERE CountryCode = 'USA' AND population >100000;

--->Revising the Select Query 2
Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

The CITY table is described as follows:
Field	      Type
ID	      NUMBER
NAME	    VARCHAR2(17)
COUNTRY CODE	  VARCHAR2(3)
DISTRICT     VARCHAR2(20)
POPULATION    	NUMBER

SOLUTION:
SELECT name FROM City WHERE CountryCode = 'USA' AND Population > 120000;

-->Select All
Query all columns for every row in the CITY table.

The CITY table is described as follows:

Field	Type
ID	NUMBER
NAME	VARCHAR2(17)
COUNTRY CODE	VARCHAR2(3)
DISTRICT	VARCHAR2(20)
POPULATION	NUMBER

SOLUTION:
SELECT * FROM City

-->Select By ID
Query all columns for a city in CITY with the ID 1661.

The CITY table is described as follows:

Field	Type
ID	NUMBER
NAME	VARCHAR2(17)
COUNTRY CODE	VARCHAR2(3)
DISTRICT	VARCHAR2(20)
POPULATION	NUMBER

SOULTION:
SELECT * FROM City WHERE ID = 1661; 

-->Japanese Cities Detail
Query the details for all the Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

The CITY table is described as follows:

Field	Type
ID	NUMBER
NAME	VARCHAR2(17)
COUNTRY CODE	VARCHAR2(3)
DISTRICT	VARCHAR2(20)
POPULATION	NUMBER

SOLUTION:
SELECT * FROM City WHERE CountryCode = 'JPN';        

-->Japanese Cities Name
Query the the names of all the Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

The CITY table is described as follows:

Field	Type
ID	NUMBER
NAME	VARCHAR2(17)
COUNTRY CODE	VARCHAR2(3)
DISTRICT	VARCHAR2(20)
POPULATION	NUMBER

SOLUTION:
SELECT Name FROM City WHERE CountryCode = 'JPN';    

-->Weather Observation Station 1
Query a list of CITY and STATE from STATION.

The STATION table is described as follows:

Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER

SOLUTION:
SELECT City,State FROM Station;      

-->Weather Observation Station 3

Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer.

The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT City FROM Station WHERE MOD(ID,2)=0 ORDER BY City ASC;    

-->Weather Observation Station 4
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT COUNT(City) - COUNT(DISTINCT City) FROM Station;   

-->Weather Observation Station 5
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT city, length(city) FROM station order by length(city) desc limit 1;
SELECT city, length(city) FROM station order by length(city) asc, city asc limit 1;

-->Weather Observation Station 6
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT City
FROM Station
WHERE 
(City LIKE'a%')
or (City LIKE'e%')
or (City LIKE'i%')
or (City LIKE'o%')
or (City LIKE'u%')
ORDER BY City;

-->Weather Observation Station 7
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT City
FROM Station
WHERE 
(City LIKE'%a')
or (City LIKE'%e')
or (City LIKE'%i')
or (City LIKE'%o')
or (City LIKE'%u')
ORDER BY City;

-->Weather Observation Station 8
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT City
FROM Station
WHERE 
(City LIKE'a%' OR City LIKE'e%' or City LIKE'i%' OR City LIKE'o%' OR City LIKE'u%')
AND
(City LIKE'%a' OR City LIKE'%e' or City LIKE'%i' OR City LIKE'%o' OR City LIKE'%u')
ORDER BY City;

-->Weather Observation Station 9
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT city FROM station
WHERE CITY NOT REGEXP '^[aeiou]';

-->Weather Observation Station 10
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT city FROM station
WHERE CITY NOT REGEXP '[aeiou]$';

-->Weather Observation Station 11
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT(City) 
SELECT DISTINCT City from Station
WHERE (City NOT LIKE 'a%'
        AND City  NOT LIKE 'e%'
        AND City NOT LIKE 'i%' 
        AND City NOT LIKE 'o%'
        AND City NOT LIKE 'u%')
OR (City NOT LIKE '%a' AND
    City  NOT LIKE '%e' AND
    City NOT LIKE '%i' AND 
    City NOT LIKE '%o' AND 
    City NOT LIKE '%u');
    
 -->Weather Observation Station 12   
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
The STATION table is described as follows:
Field	Type
ID	NUMBER
CITY	VARCHAR2(21)
STATE	VARCHAR2(2)
LAT_N	NUMBER
LONG_W	NUMBER
where LAT_N is the northern latitude and LONG_W is the western longitude.

SOLUTION:
SELECT DISTINCT(CITY) 
FROM STATION 
WHERE CITY NOT REGEXP '^[aeiou]' 
    AND CITY NOT REGEXP '[aeiou]$';

-->Higher Than 75 Marks
Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
The STUDENTS table is described as follows:

Column	Type
ID	INTEGER
NAME	STRING
MARKS	INTEGER
The Name column only contains uppercase (A-Z) and lowercase (a-z) letters.

Sample Input

ID	NAME	MARKS
1	ASHLEY	81
2	SAMANTHA	75
4	JULIA	76
3	JULIA	84
Sample Output

Ashley Julia Belvet

SOLUTION:
SELECT name
FROM Students
WHERE Marks >75
ORDER BY RIGHT(Name,3), ID ASC;

-->Employee Names
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

The Employee table containing employee data for a company is described as follows:

Column	Type
employee_id	INTEGER
name	STRING
months	INTEGER
salary	INTEGER

SOLUTION:
SELECT name
FROM employee
ORDER BY name ASC;

-->Employee Salaries
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.
The Employee table containing employee data for a company is described as follows:

Column	Type
employee_id	INTEGER
name	STRING
months	INTEGER
salary	INTEGER
where employee_id is an employee's ID number, name is their name, months is the total number of months they've been working for the company, and salary is the their monthly salary.

SOLUTION:
SELECT name
FROM employee
WHERE salary >2000 AND months <10
ORDER BY employee_id;


-->Query a count of the number of cities in CITY having a Population larger than 100,000.
SELECT COUNT(*)
FROM City
WHERE population >100000;

-->Query the total population of all cities in CITY where District is California
SELECT SUM(population)
FROM city
WHERE district = 'california';

